/*************************************************************************
* File Name: /Users/lyon_z/workspace/test/2DGameEngine/include/Game.cpp
* Author: Lyon
* Mail: 786208769@qq.com
* Created Time: 二  4/26 16:26:49 2022
*************************************************************************/
#include "Game.h"

Game::Game(){ std::cout << "Structor Function!\n"; };

Game::~Game(){ std::cout << "Destructor Function!\n"; };

void Game::init(const char* title, int xpos, int ypos, int width, int height, bool fullscream)
{
    int flags = 0;
    if(fullscream)
    {
        flags =  SDL_WINDOW_FULLSCREEN;
    }

    if(SDL_Init(SDL_INIT_EVERYTHING) == 0)
    {
        std::cout << "Subsystems Initialised!\n";
        window = SDL_CreateWindow(title, xpos, ypos, width, height, flags);
        if(!window)
            std::cerr << "Window created failled!\n";

        renderer = SDL_CreateRenderer(window, -1, 0);
        if(!renderer)
            std::cerr << "Render created failed!\n";
        
        SDL_SetRenderDrawColor(renderer, 155, 55, 80, 0xff);

        isRunning = true;
    }
    else{   //初始化失败，程序不继续运行下去
        isRunning = false;
    }
}
void Game::handleEvent()
{
   SDL_Event event;
   SDL_PollEvent(&event);
   switch(event.type){
        case SDL_QUIT:
            isRunning = false;
            break;

        default:
            break;
   }
}

void Game::update()
{
    std::cout << "Window" << cnt++ << " loading..." << std::endl;
    SDL_Delay(500);
}

void Game::render()
{
    SDL_RenderClear(renderer);

    SDL_RenderPresent(renderer);
}
void Game::clean()
{
    SDL_DestroyWindow(window);
    SDL_DestroyRenderer(renderer);
    SDL_Quit();

    /* Game::~Game(); */

    std::cout << "Game Quit!\n";
}



